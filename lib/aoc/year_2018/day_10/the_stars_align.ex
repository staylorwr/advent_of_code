defmodule Aoc.Year2018.Day10.TheStarsAlign do
  @moduledoc """
  ## --- Day 10: The Stars Align ---

  It's no use; your navigation system simply isn't capable of providing walking
  directions in the arctic circle, and certainly not in 1018.

  The Elves suggest an alternative. In times like these, North Pole rescue
  operations will arrange points of light in the sky to guide missing Elves back
  to base. Unfortunately, the message is easy to miss: the points move slowly
  enough that it takes hours to align them, but have so much momentum that they
  only stay aligned for a second. If you blink at the wrong time, it might be
  hours before another message appears.

  You can see these points of light floating in the distance, and record their
  position in the sky and their velocity, the relative change in position per
  second (your puzzle input). The coordinates are all given from your perspective;
  given enough time, those positions and velocities will move the points into a
  cohesive message!

  Rather than wait, you decide to fast-forward the process and calculate what the
  points will eventually spell.

  For example, suppose you note the following points:

  ```
  position=< 9,  1> velocity=< 0,  2>
  position=< 7,  0> velocity=<-1,  0>
  position=< 3, -2> velocity=<-1,  1>
  position=< 6, 10> velocity=<-2, -1>
  position=< 2, -4> velocity=< 2,  2>
  position=<-6, 10> velocity=< 2, -2>
  position=< 1,  8> velocity=< 1, -1>
  position=< 1,  7> velocity=< 1,  0>
  position=<-3, 11> velocity=< 1, -2>
  position=< 7,  6> velocity=<-1, -1>
  position=<-2,  3> velocity=< 1,  0>
  position=<-4,  3> velocity=< 2,  0>
  position=<10, -3> velocity=<-1,  1>
  position=< 5, 11> velocity=< 1, -2>
  position=< 4,  7> velocity=< 0, -1>
  position=< 8, -2> velocity=< 0,  1>
  position=<15,  0> velocity=<-2,  0>
  position=< 1,  6> velocity=< 1,  0>
  position=< 8,  9> velocity=< 0, -1>
  position=< 3,  3> velocity=<-1,  1>
  position=< 0,  5> velocity=< 0, -1>
  position=<-2,  2> velocity=< 2,  0>
  position=< 5, -2> velocity=< 1,  2>
  position=< 1,  4> velocity=< 2,  1>
  position=<-2,  7> velocity=< 2, -2>
  position=< 3,  6> velocity=<-1, -1>
  position=< 5,  0> velocity=< 1,  0>
  position=<-6,  0> velocity=< 2,  0>
  position=< 5,  9> velocity=< 1, -2>
  position=<14,  7> velocity=<-2,  0>
  position=<-3,  6> velocity=< 2, -1>
  ```

  Each line represents one point. Positions are given as `<X, Y>` pairs: X
  represents how far left (negative) or right (positive) the point appears, while
  Y represents how far up (negative) or down (positive) the point appears.

  At `0` seconds, each point has the position given. Each second, each point's
  velocity is added to its position. So, a point with velocity `<1, -2>` is moving
  to the right, but is moving upward twice as quickly. If this point's initial
  position were `<3, 9>`, after `3` seconds, its position would become `<6, 3>`.

  Over time, the points listed above would move like this:

  `Initially:
  ........#.............
  ................#.....
  .........#.#..#.......
  ......................
  #..........#.#.......#
  ...............#......
  ....#.................
  ..#.#....#............
  .......#..............
  ......#...............
  ...#...#.#...#........
  ....#..#..#.........#.
  .......#..............
  ...........#..#.......
  #...........#.........
  ...#.......#..........

  After 1 second:
  ......................
  ......................
  ..........#....#......
  ........#.....#.......
  ..#.........#......#..
  ......................
  ......#...............
  ....##.........#......
  ......#.#.............
  .....##.##..#.........
  ........#.#...........
  ........#...#.....#...
  ..#...........#.......
  ....#.....#.#.........
  ......................
  ......................

  After 2 seconds:
  ......................
  ......................
  ......................
  ..............#.......
  ....#..#...####..#....
  ......................
  ........#....#........
  ......#.#.............
  .......#...#..........
  .......#..#..#.#......
  ....#....#.#..........
  .....#...#...##.#.....
  ........#.............
  ......................
  ......................
  ......................

  After 3 seconds:
  ......................
  ......................
  ......................
  ......................
  ......#...#..###......
  ......#...#...#.......
  ......#...#...#.......
  ......#####...#.......
  ......#...#...#.......
  ......#...#...#.......
  ......#...#...#.......
  ......#...#..###......
  ......................
  ......................
  ......................
  ......................

  After 4 seconds:
  ......................
  ......................
  ......................
  ............#.........
  ........##...#.#......
  ......#.....#..#......
  .....#..##.##.#.......
  .......##.#....#......
  ...........#....#.....
  ..............#.......
  ....#......#...#......
  .....#.....##.........
  ...............#......
  ...............#......
  ......................
  ......................
  `After 3 seconds, the message appeared briefly: `*HI*`. Of course, your message
  will be much longer and will take many more seconds to appear.

  *What message will eventually appear in the sky?*

  """

  @doc """

  """
  def part_1(input) do
    input
    |> parse()
    |> tick_until_touching(false, 0)
  end

  @doc """

  """
  def part_2(input) do
    input
  end

  defp tick_until_touching(points, true, count), do: {points, count}

  defp tick_until_touching(points, _, count) do
    next_points = tick(points)
    touching = all_touching?(next_points)
    tick_until_touching(next_points, touching, count + 1)
  end

  def all_touching?(points) do
    Enum.all?(points, fn {{pos_x, pos_y}, _} ->
      Enum.any?(points, fn {{test_x, test_y}, _} ->
        same = pos_x == test_x && pos_y == test_y
        x_diff = abs(pos_x - test_x)
        y_diff = abs(pos_y - test_y)
        touching = x_diff <= 1 && y_diff <= 1
        !same && touching
      end)
    end)
  end

  defp tick(points) do
    Enum.map(points, fn {{x_0, y_0}, {x_v, y_v} = v} ->
      {{x_0 + x_v, y_0 + y_v}, v}
    end)
  end

  def parse(str) do
    str
    |> String.trim()
    |> String.split("\n")
    |> Enum.map(&into_pos_vel_pair/1)
  end

  def into_pos_vel_pair(line) do
    [[_, pos_str], [_, vel_str]] = Regex.scan(~r/<([^>]*)>/, line)

    [pos_x, pos_y] = into_pair(pos_str)
    [vel_x, vel_y] = into_pair(vel_str)
    {{pos_x, pos_y}, {vel_x, vel_y}}
  end

  defp into_pair(str) do
    str
    |> String.split(",")
    |> Enum.map(&String.trim/1)
    |> Enum.map(&String.to_integer/1)
  end
end
